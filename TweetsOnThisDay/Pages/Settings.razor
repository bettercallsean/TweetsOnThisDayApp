@page "/settings"
@inject NavigationManager Navigation

<div class="p-2">
	<div class="d-flex flex-column align-items-center justify-content-center">
        <img class="rounded-circle img-thumbnail profile-picture" onclick=@UploadNewPictureAsync src="data:image/bmp;base64, @(Convert.ToBase64String(ProfilePicture))" style="cursor: pointer; max-width: 400px"/>
        <InputText class="mt-2" @bind-Value=@Username DisplayName="Username" />
        <button onclick=@SaveChangesAsync type="button" class="btn btn-primary mt-2">
            Save Changes
        </button>
	</div>

	<div class="d-flex flex-column align-items-center justify-content-center pt-4">
		<button disabled=@IsDeleteTweetButtonDisabled onclick=@DeleteTweetDataAsync type="button" class="btn btn-danger">
			Delete Tweet Data
		</button>
		<p>Size on disk: @TweetDataFileSize MB</p>
	</div>
</div>


@code {
    private readonly string _temporaryProfilePicture = Path.Combine(FileSystem.Current.AppDataDirectory, "profilePictureTmp.jpg");

    private bool TweetFileExists => File.Exists(Constants.TweetsByYearFile);
    private bool IsDeleteTweetButtonDisabled => !TweetFileExists;
    private double TweetDataFileSize => TweetFileExists
        ? Math.Round(Directory.GetFiles(FileSystem.Current.AppDataDirectory).Sum(x => new System.IO.FileInfo(Path.Combine(FileSystem.Current.AppDataDirectory, x)).Length) / Math.Pow(2, 20), 2)
        : 0;
    private byte[] ProfilePicture { get; set; } = new byte[2];
    private string Username { get; set; }

    protected override async Task OnInitializedAsync()
    {
        ProfilePicture = await File.ReadAllBytesAsync(Constants.ProfilePictureFile);
        Username = Preferences.Get("username", string.Empty);
    }

    private async Task UploadNewPictureAsync()
    {
        var photo = await MediaPicker.Default.PickPhotoAsync();

        if (photo != null)
        {
            using var sourceStream = await photo.OpenReadAsync();
            using var localFileStream = File.OpenWrite(_temporaryProfilePicture);

            await sourceStream.CopyToAsync(localFileStream);

            ProfilePicture = await File.ReadAllBytesAsync(_temporaryProfilePicture);
        }

    }

    private async Task SaveChangesAsync()
    {
        using var temporaryImage = File.OpenRead(_temporaryProfilePicture);
        using var profilePicture = File.OpenWrite(Constants.ProfilePictureFile);

        await temporaryImage.CopyToAsync(profilePicture);

        await temporaryImage.DisposeAsync();

        File.Delete(_temporaryProfilePicture);

        Preferences.Set("username", Username);
    }

    private async Task DeleteTweetDataAsync()
    {
        var deleteData = await Application.Current.MainPage.DisplayAlert("Delete?", "Are you sure want to delete your tweet data?", "Yes", "No");

        if(deleteData)
        {
            foreach (var file in Directory.GetFiles(FileSystem.Current.AppDataDirectory))
            {
                File.Delete(file);
            }

            Preferences.Remove("username");
            Preferences.Remove("archiveDate");
            Preferences.Remove("showArchiveWarning");

            Navigation.NavigateTo("/");
        }
    }
}
