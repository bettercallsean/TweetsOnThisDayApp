@page "/"

@using Microsoft.Extensions.Configuration
@using System.Text.RegularExpressions;
@using System.Text.Json;
@using System.Web;
@using TweetsOnThisDay.Helpers;
@using TweetsOnThisDay.Models;

@if (!_tweetsLoaded)
{

	@if (!_tweetsJsonExists)
	{
		<GetUserTweetsFile TweetJsFileUploaded=@LoadTweetsAsync />
	}
	else
	{
		<Loading IsLoading=@(!_tweetsLoaded) LoadingText="Loading tweets" />
	}
}
else
{
	if(_tweets.Count == 0)
	{
		<h2 class="text-center p-4">No tweets today :(</h2>
	}
	else
	{
		var backgroundColours = new List<string>();

		foreach (var (year, tweets) in _tweets)
		{
			if (backgroundColours.Count == 0)
				backgroundColours = BackgroundColourHelper.GetBackgroundColoursList();
			
				var tweetCount = tweets.Count;
			var backgroundColourIndex = Random.Shared.Next(backgroundColours.Count);

			<div class="tweet-year">
				<TweetYear Tweets=@tweets Year=@year BackgroundColour=@backgroundColours[backgroundColourIndex] />
			</div>


			if (backgroundColours.Count > 0)
				backgroundColours.RemoveAt(backgroundColourIndex);
		}
	}
}

@code {
    private bool _tweetsLoaded => _tweets != null;
    private Dictionary<int, List<TweetModel>> _tweets;
    private bool _tweetsJsonExists;

    protected override async Task OnInitializedAsync()
    {
        await LoadTweetsAsync();
    }

    private async Task LoadTweetsAsync()
    {
        if (File.Exists(Constants.TweetsByYearFile))
        {
            var foo = FileSystem.Current.AppDataDirectory;
            _tweetsJsonExists = true;

            await Task.Run(async () =>
            {
                var tweets = JsonSerializer.Deserialize<Dictionary<int, List<TweetModel>>>(await File.ReadAllTextAsync(Constants.TweetsByYearFile));

                var tweetsOnThisDay = tweets.Where(x => x.Key == int.Parse($"{DateTime.Today.Day}{DateTime.Today.Month:D2}")).Select(x => x.Value).FirstOrDefault();

                if (tweetsOnThisDay == null)
                {
                    _tweets = new Dictionary<int, List<TweetModel>>();
                }
                else
                {
                    _tweets = tweetsOnThisDay.GroupBy(x => x.CreatedAt.Year).ToDictionary(x => x.Key, x => x.ToList());
                }

            });
        }
        else
        {
            _tweetsJsonExists = false;
        }
    }
}