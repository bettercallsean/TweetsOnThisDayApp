@page "/"

@using Microsoft.Extensions.Configuration
@using System.Text.RegularExpressions;
@using System.Text.Json;
@using System.Web;
@using TweetsOnThisDay.Models;
@inject IConfiguration Configuration

@if (!_tweetsLoaded)
{

	@if (_tweetsJsonDoesntExist)
	{
		<GetUserTweetsFile TweetJsFileUploaded=@LoadTweetsAsync />
	}
	else
	{
		<Loading IsLoading=@(!_tweetsLoaded) LoadingText="Loading tweet data" />
	}
}
else
{
	var backgroundColours = GetBackgroundColoursList();

	foreach (var (year, tweets) in _tweets)
	{
		var tweetCount = tweets.Count;
		var backgroundColourIndex = Random.Shared.Next(backgroundColours.Count);
		<div class="tweet-year" style="background-color: @backgroundColours[backgroundColourIndex]">
			<h2>~ @year.ToString() ~</h2>
		</div>
		<div class="tweet-count" style="background-color: @backgroundColours[backgroundColourIndex]">
			<p class="text-body-secondary">@tweetCount.ToString() tweet@(tweetCount > 1 ? "s" : string.Empty)</p>
		</div>

		if (backgroundColours.Count > 0)
			backgroundColours.RemoveAt(backgroundColourIndex);
		else
			backgroundColours = GetBackgroundColoursList();

		foreach (var tweet in tweets)
		{
			<div class="tweet shadow-sm">
				<p class="tweet-time">@tweet.CreatedAt.ToString("t")</p>
				<p class="tweet-text">@HttpUtility.HtmlDecode(tweet.FullText)</p>
				@if (tweet.ExtendedEntities != null)
				{
					<div class="image-container">
						@foreach (var media in tweet.ExtendedEntities.Media)
						{
							if (media.VideoInfo == null)
							{
								<img class="rounded mx-auto d-block" src="@media.MediaUrlHttps" />
							}
							else
							{
								var videoInfo = media.VideoInfo.Variants.First();
								<video controls autoplay muted>
									<source src="@videoInfo.Url" type="@videoInfo.ContentType" />
									Your browser does not support the video tag.
								</video>
							}
						}
					</div>
				}
				<a class="tweet-link" href="@($"https://twitter.com/{_username}/status/{tweet.Id}")">View Tweet</a>
			</div>
		}
	}
}


@code {
	private bool _tweetsLoaded => _tweets != null;
	private Dictionary<int, List<Tweet>> _tweets;
	private string _username;
	private bool _tweetsJsonDoesntExist;

	protected override async Task OnInitializedAsync()
	{
		_username = Configuration["TwitterUsername"];
		await LoadTweetsAsync();
	}

	private async Task LoadTweetsAsync()
	{
		if (File.Exists(Constants.TweetsByYearFile))
		{
			var foo = FileSystem.Current.AppDataDirectory;
			_tweetsJsonDoesntExist = false;

			var tweets = JsonSerializer.Deserialize<Dictionary<string, List<Tweet>>>(await File.ReadAllTextAsync(Constants.TweetsByYearFile));

			_tweets = tweets.FirstOrDefault(x => x.Key == $"{DateTime.Today.Day}/{DateTime.Today.Month}")
				.Value.GroupBy(x => x.CreatedAt.Year)
				.ToDictionary(x => x.Key, x => x.ToList());
		}
		else
		{
			_tweetsJsonDoesntExist = true;
		}
	}

	private static List<string> GetBackgroundColoursList() => new List<string>
			{
				"skyblue",
				"lightcoral",
				"mediumspringgreen",
				"peachpuff",
				"palegreen",
				"lightcyan",
				"thistle",
				"powderblue"
			};
}