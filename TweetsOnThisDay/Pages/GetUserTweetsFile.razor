@using System.Text.Json;
@using System.Text;
@using System.Drawing;
@using System.Text.RegularExpressions;
@using TweetsOnThisDay.Helpers;
@using TweetsOnThisDay.Models;
@using TweetsOnThisDay.Services;

@if (IsLoading)
{
	<Loading IsLoading=@IsLoading LoadingText="Storing tweet data locally" />
}
else
{
	<div class="container p-2">
		<p class="text-center">Get started by uploading your twitter archive ZIP file here</p>
		<div class="d-flex flex-column align-items-center justify-content-center">
            <button class="btn btn-secondary" onclick=@GetUserTwitterZipArchiveAsync>Choose File</button>
            @if (SelectedFile != null)
            {
                <p class="text-wrap">@SelectedFile.FileName</p>
            }
			<button disabled=@(!FileUploaded) class="btn btn-primary m-2" onclick=@ProcessUserDataAsync>Upload</button>
		</div>
	</div>	
    
    <div class="container p-2 text-center">
        <h2>How to get your Twitter archive</h2>
        <p>To download your Twitter archive, <a href="https://twitter.com/settings/download_your_data">go here</a> and click on 'Request Archive'</p>
        <p>It can take a few days for this to be processed so hang tight! You will receive an email when it is ready to download.</p>
        <p>When it's ready, download it to your phone and come back here to upload it!</p>
        <img src="images/request_archive.png" class="p-2" style="width: 100%"/>
    </div>
}

@code {
    private const string TwitterArchiveFolderRegex = @"twitter-([0-9]{4}-[0-9]{2}-[0-9]{2})-[a-z0-9]*";

    private bool IsLoading { get; set; }
    private bool FileUploaded { get; set; }
    private FileResult SelectedFile { get; set; }

    [Parameter]
    public EventCallback TweetJsFileUploaded { get; set; }

    private async Task GetUserTwitterZipArchiveAsync()
    {
        var file = await FilePicker.Default.PickAsync(new PickOptions
        {
            PickerTitle = "Select archive folder"
        });

        if (Regex.Match(file.FileName, TwitterArchiveFolderRegex).Success)
        {
            SelectedFile = file;
            FileUploaded = true;
        }
        else
        {
            SelectedFile = null;
            FileUploaded = false;
            await Application.Current.MainPage.DisplayAlert("Invalid File", "The uploaded file doesn't appear to be the Twitter archive ZIP. Check the uploaded file and try again.", "Ok");
        }
    }

    private async Task ProcessUserDataAsync()
    {
        IsLoading = true;

        try
        {
            var entries = await ZipService.ExtractFiles(SelectedFile.FullPath);

            var profilePicture = entries.FirstOrDefault(x => x.IsImage && ImageHelper.IsPictureSquare(x.FileBytes));
            await File.WriteAllBytesAsync(Constants.ProfilePictureFile, profilePicture.FileBytes);

            var archiveDate = DateTime.Parse(Regex.Match(SelectedFile.FileName, TwitterArchiveFolderRegex).Groups[1].Value);
            Preferences.Set("archiveDate", archiveDate);

            await ProcessUserTweetsAsync(entries.Where(x => x.Name == "data/tweets.js").Select(x => Encoding.UTF8.GetString(x.FileBytes)).FirstOrDefault());
            ProcessUserAccountData(entries.Where(x => x.Name == "data/account.js").Select(x => Encoding.UTF8.GetString(x.FileBytes)).FirstOrDefault());
        }
        catch
        {
            SelectedFile = null;
            FileUploaded = false;

            await Application.Current.MainPage.DisplayAlert("Invalid Zip", "The ZIP file you uploaded is not valid, please check the uploaded file and try again.", "Ok");
        }

        IsLoading = false;
    }

    private void ProcessUserAccountData(string accountJson)
    {
        var accountJsonTmp = accountJson.Split("\n");
        accountJsonTmp[0] = string.Empty;
        accountJsonTmp[^1] = string.Empty;
        accountJson = string.Join("", accountJsonTmp);

        var accountRoot = JsonSerializer.Deserialize<AccountRoot>(accountJson);

        Preferences.Set("username", accountRoot.Account.Username);
    }

    private async Task ProcessUserTweetsAsync(string tweetJson)
    {
        var tweetJsonTmp = tweetJson.Split("\n");
        tweetJsonTmp[0] = "[";
        tweetJson = string.Join("", tweetJsonTmp);

        try
        {
            await Task.Run(async () =>
            {
                var tweetData = JsonSerializer.Deserialize<List<Root>>(tweetJson);

                var tweets = tweetData
                                .Select(x => x.Tweet)
                                .OrderBy(x => x.CreatedAt)
                                .GroupBy(x => new { x.CreatedAt.Day, x.CreatedAt.Month })
                                .ToDictionary(x => int.Parse($"{x.Key.Day}{x.Key.Month:D2}"), x => x.ToList());

                await File.WriteAllTextAsync(Constants.TweetsByYearFile, JsonSerializer.Serialize(tweets));
            });

            await TweetJsFileUploaded.InvokeAsync();
        }
        catch
        {
            FileUploaded = false;
        }
    }
}
