@using System.Text.Json;
@using TweetsOnThisDay.Models;

@if (_isLoading)
{
	<Loading IsLoading=@_isLoading LoadingText="Processing tweet data" />
}
else
{
	<div class="container p-2">
		<p class="text-center">Get started by uploading your 'tweet.js' file here</p>
		<div class="d-flex justify-content-end">
			<InputFile OnChange=@OnInputFileChanged />
		</div>
		<div class="d-flex justify-content-center m-2">
			<button disabled=@(!_fileUploaded) class="btn btn-primary" onclick=@ProcessUserTweetDataAsync>Upload</button>
		</div>
	</div>	
}

@code {
	private bool _isLoading;
	private bool _fileUploaded;
	private InputFileChangeEventArgs _inputFileChangeEventArgs;

	[Parameter] 
	public EventCallback TweetJsFileUploaded { get; set; }

	private void OnInputFileChanged(InputFileChangeEventArgs e)
	{
		_inputFileChangeEventArgs = e;
		_fileUploaded = true;
	}

	private async Task ProcessUserTweetDataAsync()
	{
		_isLoading = true;

		var ms = new MemoryStream();
		await _inputFileChangeEventArgs.File.OpenReadStream(long.MaxValue).CopyToAsync(ms);
		var bytes = ms.ToArray();

		var tweetJsonTmp = System.Text.Encoding.Default.GetString(bytes).Split("\n");
		tweetJsonTmp[0] = "[";
		var tweetJson = string.Join("", tweetJsonTmp);

		try
		{
			await Task.Run(async () =>
			{
				var tweetData = JsonSerializer.Deserialize<List<Root>>(tweetJson);

				var tweets = tweetData
				.Select(x => x.Tweet)
				.OrderBy(x => x.CreatedAt)
				.GroupBy(x => new { x.CreatedAt.Day, x.CreatedAt.Month })
				.ToDictionary(x => $"{x.Key.Day}/{x.Key.Month}", x => x.ToList());

				await File.WriteAllTextAsync(Constants.TweetsByYearFile, JsonSerializer.Serialize(tweets));
			});


			await TweetJsFileUploaded.InvokeAsync();
		}
		catch
		{
			_fileUploaded = false;
		}

		_isLoading = false;
	}
}
